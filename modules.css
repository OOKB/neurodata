
/* General
–––––––––––––––––––––––––––––––––––––––––––––––––– */
/* Color Palette */
/** From OOKB (as part of my personal vernacular, being used everywhere :)
@ookb-white:         white;
@ookb-black:         black;

@ookb-pink:          rgba(236,64,121,1);
@ookb-brown:         rgba(47,41,38,1);
@ookb-gray:          rgba(132,132,120,1);
@ookb-darkgray:      rgba(96,103,103,1);
@ookb-lightgray:     rgba(194,211,186,1);

@ookb-red:           rgba(183,80,81,1);
@ookb-orange:        rgba(195,115,99,1);
@ookb-yellow:        rgba(197,192,101,1);
@ookb-green:         rgba(140,165,115,1);
@ookb-blue:          rgba(157,178,176,1);
@ookb-purple:        rgba(174,139,164,1);
**/

.white               { color: white; }
.darkblue            { color: rgba(000,061,076,1); }
.darkred             { color: rgba(138,042,043,1); }

.bg-white            { background-color: white; }
.bg-darkblue         { background-color: rgba(000,061,076,1); }
.bg-darkgreen        { background-color: rgba(068,105,061,1); }
.bg-darkyellow       { background-color: rgba(255,158,027,1); }
.bg-darkred          { background-color: rgba(138,042,043,1); }

/********/

* {
  -webkit-box-sizing: border-box;
  box-sizing: border-box;
  position: relative;
  /* type stuff */
  -moz-font-feature-settings: "kern";
  -webkit-font-feature-settings: "kern";
  -ms-font-feature-settings: "kern";
  -o-font-feature-settings: "kern";
  font-feature-settings: "kern";
  font-kerning: normal;
  text-rendering: optimizeLegibility;
}

html, body {
  height: 100%;
  margin: 0;
  padding: 0;
  width: 100%;
}

/* Visibility Classes */
.show {
  display: block !important;
}
.hidden {
  display: none !important;
}
.invisible {
  visibility: hidden;
}

.visible-lg,
.hidden-sm {
  display: none;
  visibility: hidden;
}

.hide-text {
  text-indent: 200%;
  white-space: nowrap;
  overflow: hidden;
}

.show-text {
  text-indent: 0%;
  white-space: normal;
  overflow: visible;
}

/* floats and clears */
.left,
.floatleft,
.float-left,
.leftfloat,
.left-float {
  float: left;
}

.right,
.floatright,
.float-right,
.rightfloat,
.right-float {
  float: right;
}

.clear,
.clearboth,
.clear-both,
.both-clear,
.bothclear {
  clear: both;
}
.clearleft,
.leftclear,
.clear-left,
.left-clear {
  clear: left;
}
.clearright,
.rightclear,
.clear-right,
.right-clear {
  clear: right;
}

.clearfix::after,
.clear-fix::after,
.cf::after,
.group::after {
  content: '';
  display: table;
  clear: both;
}

/*
  center, left and right align text.
  it is my personal opinion that you should never use "text-align: justify;" on the web.
  browsers aren't good enough at typesetting justified text.
  I have not created those styles for that reason.
*/
.text-center,
.textcenter,
.center-text,
.centertext,
.align-center,
.center-align,
.aligncenter,
.centeralign {
  text-align: center;
}

.text-right,
.right-text,
.textright,
.righttext,
.align-right,
.right-align,
.alignright,
.rightalign {
  text-align: right;
}

.text-left,
.left-text,
.textleft,
.lefttext,
.align-left,
.left-align,
.alignleft,
.leftalign {
  text-align: left;
}

/* columnar stuff */
#wrapper,
.wrapper,
.container {
  margin: 0 auto;
  padding: 0 1rem 2rem 1rem;
  width: 100%;
}

.group,
.grouped,
.row {
  margin: 0 0 2rem 0;
}

.column,
.columns {
  margin: 0 0 2rem 0;
  padding: 0;
}

/* Start of the Grid
===========================================*/
/*
  widths are set using CSS calc() function
  width: calc(100% / x * y);
  where x = #of columns total, and y = #of columns the class crosses.
  by default this is a 12 column grid, so x = 12
*/
.one,
.two,
.three,
.four,
.five,
.six,
.halfwidth,
.seven,
.eight,
.nine,
.ten,
.eleven,
.twelve,
.fullwidth    { width: calc(100% / 12 * 12); }
/*everything goes full width on skinny viewports */

@media (min-width: 30rem) {
  #wrapper,
  .wrapper,
  .container {
    margin: 0 auto;
    min-width: 30rem;
    width: 80%;
  }
}

@media (min-width: 50rem) {
  #wrapper,
  .wrapper,
  .container {
    margin: 0 auto;
    max-width: 75rem;
  }

  .group,
  .grouped,
  .row {
    margin: 0 -1rem 2rem -1rem;
  }

  /* columnar stuff */
  .column,
  .columns {
    float: left;
    margin: 0 0 2rem 0;
    padding: 0 1rem;
  }

  /* the Grid
  ===========================================*/
  /*
    widths are set using CSS calc() function
    width: calc(100% / x * y);
    where x = #of columns total, and y = #of columns the class crosses.
    by default this has been set as a 12 column grid, so x = 12.
    y matches numerically the class number.
  */
  .one                   { width: calc(100% / 12 * 01); }
  .two                   { width: calc(100% / 12 * 02); }
  .three                 { width: calc(100% / 12 * 03); }
  .four                  { width: calc(100% / 12 * 04); }
  .five                  { width: calc(100% / 12 * 05); }
  .six, .halfwidth       { width: calc(100% / 12 * 06); }
  .seven                 { width: calc(100% / 12 * 07); }
  .eight                 { width: calc(100% / 12 * 08); }
  .nine                  { width: calc(100% / 12 * 09); }
  .ten                   { width: calc(100% / 12 * 10); }
  .eleven                { width: calc(100% / 12 * 11); }
  .twelve, .fullwidth    { width: calc(100% / 12 * 12); }
  /*
    you can easily add more columns (or remove columnes) by
    changing 12 to the number of total columns you want, and then
    add additional classes for the extra columns...
    like if you want 16 column base grid, you'd get something like
    width: calc(100% / x * y);
    x would be 16
    width: calc(100% / 16 * #columnsSpanned);
    make sense?
  */


  /* some standard offsets */
  .offset-by-one         { margin-left: calc(100% / 12 * 01); }
  .offset-by-two         { margin-left: calc(100% / 12 * 02); }
  .offset-by-three       { margin-left: calc(100% / 12 * 03); }
  .offset-by-four        { margin-left: calc(100% / 12 * 04); }
  .offset-by-five        { margin-left: calc(100% / 12 * 05); }
  .offset-by-six,
  .offset-by-half        { margin-left: calc(100% / 12 * 06); }
  .offset-by-seven       { margin-left: calc(100% / 12 * 07); }
  .offset-by-eight       { margin-left: calc(100% / 12 * 08); }
  .offset-by-nine        { margin-left: calc(100% / 12 * 09); }
  .offset-by-ten         { margin-left: calc(100% / 12 * 10); }
  .offset-by-eleven      { margin-left: calc(100% / 12 * 11); }
  .offset-by-twelve      { margin-left: calc(100% / 12 * 12); }

  .visible-lg {
    display: block;
    visibility: visible;
  }
  .visible-sm,
  .hidden-lg {
    display: none;
    visibility: hidden;
  }
}

/* Base type and layout Styles
–––––––––––––––––––––––––––––––––––––––––––––––––– */
/* NOTE
html is set to 100% so that all the REM measurements throughout this doc are
are based on 16px sizing. So basically 1rem = 16px :) — should a better solution be devised? */
html {
  font-size: 100%;
}
body {
  font-size: 1em; /* currently ems cause chrome bug misinterpreting rems on body element */
  line-height: 1.5;
  font-weight: 400;
  /* do I want a better, wider ranging font-stack? */
  font-family: "HelveticaNeue", "Helvetica Neue", Helvetica, Arial, sans-serif;
  color: #231f20;
  -webkit-hyphens: auto;
  -moz-hyphens: auto;
  hyphens: auto;
  text-rendering: optimizeLegibility;
}

/* Base Typography
  these are currently way to large and slightly strange...
  come up with better standard for deciding sizes - modularscale based on 1.618?
–––––––––––––––––––––––––––––––––––––––––––––––––– */
h1, h2, h3, h4, h5, h6 {
  margin-top: 0;
  margin-bottom: 1.5rem;
  font-weight: bold;
  line-height: normal;
}
h1 { font-size: 3.0rem;  }
h2 { font-size: 2.5rem;  }
h3 { font-size: 2.0rem;  }
h4 { font-size: 1.75rem; }
h5 { font-size: 1.5rem;  }
h6 { font-size: 1.33rem; }

/* Larger than phablet */
/* these aren't currently being changed... though perhaps they need to be */
@media (min-width: 30rem) {
  h1 { font-size: 3.0rem; }
  h2 { font-size: 2.5rem; }
  h3 { font-size: 2.0rem; }
  h4 { font-size: 1.75rem; }
  h5 { font-size: 1.5rem; }
  h6 { font-size: 1.33rem; }
}

p {
  margin-top: 0;
  margin-bottom: 1em;
  line-height: normal;
}

.lead {
  font-size: 1.25rem;
  font-weight: 300;
  line-height: normal;
}

ul {
  margin-bottom: 1em;
  line-height: normal;
}

.list-reset {
  padding-left: 0;
  list-style: none;
}

.list-inline li {
  display: inline-block;
}

small,
.small {
  font-size: .9rem;
}

img {
  width: 100%;
  height: auto;
}

.fixed { position: fixed; }

header.fixed {
  top:0;
  right:0;
  left:0;
  z-index: 9999;
}

/* Centering in the unknown */
/* from http://css-tricks.com/centering-in-the-unknown/
  ---------------------------------------------------------*/
/* This parent can be any width and height */
.block {
  text-align: center;
}

/* The ghost, nudged to maintain perfect centering */
.block::before {
  content: '';
  display: inline-block;
  height: 100%;
  vertical-align: middle;
  margin-right: -0.25em; /* Adjusts for spacing */
}

/* The element to be centered, can
   also be of any width and height */
.centered {
  display: inline-block;
  vertical-align: middle;
  width: 300px;
}

/** Embed responsively **/
.embed-container,
.video-wrapper {
  position: relative;
  padding-bottom: 56.25%;
  height: 0;
  overflow: hidden;
  max-width: 100%;
}
.embed-container iframe,
.embed-container object,
.embed-container embed,
.video-wrapper video {
  position: absolute;
  top: 0;
  left: 0;
  right: 0;
  width: 100%;
  height: 100%;
}

/* margin, padding, etc. */
.m0           { margin:  0; }

.p0           { padding: 0; }

.mt0          { margin-top: 0;   }
.mt1          { margin-top: 1em; }
.mt2          { margin-top: 2em; }
.mt3          { margin-top: 3em; }
.mt4          { margin-top: 4em; }

.mb0          { margin-bottom: 0;   }
.mb1          { margin-bottom: 1em; }
.mb2          { margin-bottom: 2em; }
.mb3          { margin-bottom: 3em; }
.mb4          { margin-bottom: 4em; }

.pt0          { padding-top: 0;   }
.pt1          { padding-top: 1em; }
.pt2          { padding-top: 2em; }
.pt3          { padding-top: 3em; }
.pt4          { padding-top: 4em; }

.pb0          { padding-bottom: 0;   }
.pb1          { padding-bottom: 1em; }
.pb2          { padding-bottom: 2em; }
.pb3          { padding-bottom: 3em; }
.pb4          { padding-bottom: 4em; }
